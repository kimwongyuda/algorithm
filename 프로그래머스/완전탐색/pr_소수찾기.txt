#include <string>
#include <vector>
#include <iostream>
#include <math.h>
#include <algorithm>

using namespace std;

int IsPrimeNumber(int n) //함수 정의문
{
    int i = 0;
    int last = n / 2;   //약수가 없는 수가 소수이므로 2부터 n/2(자기자신/2)까지만 확인하면 됨
    if (n <= 1)//소수는 1보다 큰 자연수여야 함
    {
        return 0;
    }
                        //(자기자신/2)보다 큰수는 약수가 될 수 없음
    for (i = 2; i <= last; i++) //i를 2부터 last까지 1씩 증가시키며 반복 수행
    {
        if ((n%i) == 0) //n을 i로 나누었을때 나머지가 0이면(즉, i는 n의 약수가 아님)
        {
            return 0; //소수가 아니므로 0반환(i가 약수이므로 n은 소수가 아님)
        }
    }
    return 1; //1~last(자기자신/2)사이에 약수가 없으므로 소수임
}

void finds(vector<int> numbers, int current, vector<int>& history, int topick, vector<bool>& visited, int& answer){
    
    if(topick==0)
    {
        if(IsPrimeNumber(current) == 1 && find(history.begin(), history.end(), current) == history.end())
        {
            history.push_back(current);
            answer+=1;
        }
        return;
    }
    for(int i = 0; i<numbers.size();i++)
    {
        if(visited[i]==false)
        {
            current+=numbers[i]*(int)pow(10, topick-1);
            visited[i] = true;
            finds(numbers, current, history, topick-1, visited, answer);
            visited[i] = false;
            current=0;
        }
    }
}

int solution(string numbers) {
    
    vector<int> inumbers;
    int current = 0;
    vector<int> history;
    
    
    for(int i=0; i<numbers.size();i++)
        inumbers.push_back((int)numbers[i]-48);
    
    int answer = 0;
    
    for(int topick=0; topick<inumbers.size();topick++)
    {
        vector<int> history;
        vector<bool> visited;
        for(int i=0; i<inumbers.size();i++)
            visited.push_back(false);
        
        finds(inumbers, current, history, topick+1, visited, answer);
    }
    
    return answer;
}