#include "pch.h"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <stack>
#include <queue>
using namespace std;

int N;

int begin_ = 0;
int end_ = 0;

int get(int state, int index)
{
	return (state >> (index * 2)) & 3;
}

int set(int state, int index, int value)
{
	return (state & ~(3 << (index * 2))) | (value << (index * 2));
}

int sgn(int x)
{
	if (!x)
		return 0;

	return x > 0 ? 1 : -1;
}

int incr(int x)
{
	if (x < 0)
		return x - 1;

	return x + 1;
}

int c[1 << (12 * 2)];

int main()
{
	scanf_s("%d", &N);

	for (int i = 0; i < 4; i++)
	{
		int a;
		scanf_s("%d", &a);
		
		for (int j = 0; j < a; j++)
		{
			int b;
			scanf_s("%d", &b);

			begin_ = set(begin_, b - 1, i);
		}
	}

	for (int i = 0; i < 4; i++)
	{
		int a;
		scanf_s("%d", &a);

		for (int j = 0; j < a; j++)
		{
			int b;
			scanf_s("%d", &b);

			end_ = set(end_, b - 1, i);
		}
	}

	//bfs 양방향으로 ,,, 목표가 정해져 있고 그래프가 양방향이다.

	int answer = 0;

	if (begin_ == end_)
	{
		//한번에 찾을 경우
		answer = 0;
	}

	queue<int> q;
	
	for (int i = 0; i < (1 << (12 * 2)); i++)
		c[i] = 0;

	q.push(begin_);
	c[begin_] = 1;
	q.push(end_);
	c[end_] = -1;

	while (!q.empty())
	{
		int here = q.front();
		q.pop();

		int top[4] = { -1, -1, -1, -1 };
		for (int i = N - 1; i >= 0; i--)
		{
			top[get(here, i)] = i;
		}

		for (int i = 0; i < 4; i++)
		{
			if (top[i] != -1)
			{
				for (int j = 0; j < 4; j++)
				{
					if (i != j && (top[j] == -1 || top[j] > top[i]))
					{
						int there = set(here, top[i], j);
						if (c[there] == 0)
						{
							c[there] = incr(c[here]);
							q.push(there);
						}
						else if (sgn(c[there]) != sgn(c[here]))
						{
							answer =  abs(c[there]) + abs(c[here]) - 1;
						}
					}
				}
			}
		}

	}

	printf("%d\n", answer);



}