#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

int N;

//26 * 26으로 정해져 있으니 괜찮을 듯 싶다.
vector<vector<int>> adj;
vector<string> words;
bool isvisited[26];
vector<int> order;

void dfs(int here)
{
	isvisited[here] = 1;
	
	for (int there = 0; there < adj[here].size(); there++)
	{
		if (adj[here][there] && !isvisited[there])
			dfs(there);
	}
	order.push_back(here);
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	//초기화
	adj = vector<vector<int>>(26, vector<int>(26, 0));
	
	//입력
	cin >> N;
	for (int i = 0; i < N; i++)
	{
		string temp = "";
		cin >> temp;
		words.push_back(temp);
	}

	//인접행렬 채우기(그래프 만들기)
	for (int i = 1; i < words.size(); i++)
	{
		int j = i - 1;
		int len = min(words[i].size(), words[j].size());

		for (int k = 0; k < len; k++)
		{
			if (words[i][k] != words[j][k])
			{
				int a = words[j][k] - 'a';
				int b = words[i][k] - 'a';
				adj[a][b] = 1;
				break;
			}
		}
	}

	//dfs 실행
	int m = 26;
	for (int i = 0; i < m; i++)
	{
		if (isvisited[i] == 0)
			dfs(i);
	}

	for (int i = 0; i < m; i++)
	{
		for (int j = i + 1; j < m; j++)
		{
			if (adj[order[j]][order[i]])
			{
				order = vector<int>();
				return 0;
			}
		}
	}
	// ogklh 만 신경쓰고 나머지는 다 무시, 그 순서만 맞으면 정답 처리
	reverse(order.begin(), order.end());

	return 0;
}