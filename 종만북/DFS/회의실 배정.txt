#include "pch.h"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <stack>
using namespace std;

int N;
vector<pair<int, int>> meetings;
vector<vector<int>> adj;
vector<int> sccid;
vector<int> discovered;

stack<int> st;
int scc_count = 0, ver_count = 0;

int scc(int here)
{
	int ret = discovered[here] = ver_count++;
	st.push(here);

	for (int i = 0; i < adj[here].size(); i++)
	{
		int there = adj[here][i];

		if (discovered[there] == -1)
			ret = min(ret, scc(there));

		else if (sccid[there] == -1)
			ret = min(ret, discovered[there]);
	}

	if (ret == discovered[here])
	{
		while (true) {
			int t = st.top();
			st.pop();
			sccid[t] = scc_count;
			if (t == here)
				break;
		}
		scc_count++;
	}

	return ret;
}

void tarjanSCC()
{
	sccid = discovered = vector<int>(adj.size(), -1);
	for (int i = 0; i < adj.size(); i++)
	{
		if (discovered[i] == -1)
			scc(i);
	}
}

bool disjoint(pair<int, int> a, pair<int, int> b)
{
	return a.second <= b.first || a.first >= b.second;
}

vector<int> solve2sat()
{
	int n = adj.size() / 2;

	// a0와 !a0가 같은 경로에 있을 때
	for (int i = 0; i < 2 * n; i += 2)
	{
		if (sccid[i] == sccid[i + 1])
			return vector<int>();
	}

	vector<int> value(2 * n, -1);
	vector<pair<int, int>> order;

	for (int i = 0; i < 2 * n; i++)
		order.push_back(make_pair(-sccid[i], i));

	sort(order.begin(), order.end());

	for (int i = 0; i < 2 * n; i++)
	{
		int vertex = order[i].second;
		int var = vertex / 2;
		int istrue = vertex % 2 == 0;

		if (value[var] != -1)
			continue;

		value[var] = !istrue;
	}

	return value;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	cin >> N;

	//입력
	for (int i = 0; i < N; i++)
	{
		pair<int, int> temp1;
		cin >> temp1.first;
		cin >> temp1.second;

		pair<int, int> temp2;
		cin >> temp2.first;
		cin >> temp2.second;

		meetings.push_back(temp1);
		meetings.push_back(temp2);
	}

	//그래프 만들기
	//1: 팀 내 미팅 2개 a, b에서 !a => b, !b => a
	int var = meetings.size();
	adj.resize(var * 2);
	
	for (int i = 0; i < var; i+=2)
	{
		int j = i + 1;
		adj[i * 2 + 1].push_back(j * 2);
		adj[j * 2 + 1].push_back(i *2);
	}
	
	//회의가 겹칠 경우 a => !b (a하면 b는 안해야 참이 된다.)
	for (int i = 0; i < var; i++)
	{
		for (int j = 0; j < i; j++)
		{
			if (!disjoint(meetings[i], meetings[j]))
			{
				adj[i * 2].push_back(2 * j + 1);
				adj[j * 2].push_back(2 * i + 1);
			}
		}
	}

	//solve
	tarjanSCC();
	vector<int> answer = solve2sat();
}