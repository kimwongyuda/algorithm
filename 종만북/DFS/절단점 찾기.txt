include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

//절단점 찾기 in 무향 (무향은 교차 간선 없음)
//0 1
//1 2
//1 3
//1 4

//인접 행렬
vector<vector<int>> adj(5, vector<int>(5,0));
vector<int> discovered;
vector<bool> isCurVertex;
int count_;

int dfs(int here, bool isRoot)
{
	discovered[here] = count_++;

	int ret = discovered[here];
	int children = 0;

	for (int i = 0; i < adj[here].size(); i++)
	{
		int chk = adj[here][i];

		if (chk == 1)
		{
			int there = i;
			if (discovered[there] == -1)
			{
				children++;
				int subtree = dfs(there, false);

				if (!isRoot && subtree >= discovered[here])
				{
					isCurVertex[here] = true;
				}
				ret = min(ret, subtree);
			}
			else
			{
				ret = min(ret, discovered[there]);
			}
		}
	}

	if (isRoot)
		isCurVertex[here] = (children >= 2);

	return ret;

}

int main()
{
	//입력 초기화
	adj[0][1] = adj[1][0] = 1;
	adj[1][2] = adj[2][1] = 1;
	adj[1][3] = adj[3][1] = 1;
	adj[1][4] = adj[4][1] = 1;

	//이건 누적해도 상관 없을 듯
	for (int i = 0; i < adj.size(); i++)
	{
		discovered.clear();
		isCurVertex.clear();
		discovered.resize(5, -1);
		isCurVertex.resize(5, 0);
		count_ = 0;
		dfs(i, true);
		if (count_ < 5)
			cout << "다 못 찾음";
		else
			cout << "다 찾음";
		cout << '\n';
	}


	return 0;
}                                                           