#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

int N;

//26 * 26으로 정해져 있으니 괜찮을 듯 싶다.
//adj = 간선 갯수(유향)
vector<vector<int>> adj(26,vector<int>(26,0));
vector<string> words;
vector<string> graph[26][26];
vector<int> indegree(26,0);
vector<int> outdegree(26,0);

vector<int> circuit;

bool checkEuler()
{
	int a = 0;
	int b = 0;

	for (int i = 0; i < 26; i++)
	{
		int temp = outdegree[i] - indegree[i];

		if (temp < -1 || temp > 1)
			return false;

		if (temp == 1)
			a++;
		if (temp == -1)
			b++;

	}

	return (a == 1 && b == 1) || (a == 0 && b == 0);
}

void dfs(int here)
{
	for (int i = 0; i < adj[here].size(); i++)
	{
		while (adj[here][i] > 0)
		{
			adj[here][i]--;
			dfs(i);
		}
	}

	circuit.push_back(here);
}

void solve()
{
	//트레일
	for (int i = 0; i < 26; i++)
	{
		if (outdegree[i] == indegree[i] + 1)
		{
			dfs(i);
			return;
		}
	}

	//서킷
	for (int i = 0; i < 26; i++)
	{
		if (outdegree[i])
		{
			dfs(i);
			return;
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	//입력
	cin >> N;
	for (int i = 0; i < N; i++)
	{
		string temp = "";
		cin >> temp;
		words.push_back(temp);
	}

	//인접행렬 채우기(그래프 만들기)
	for (int i = 0; i < words.size(); i++)
	{
		int a = words[i][0] - 'a';
		int b = words[i][words[i].size() - 1] - 'a';
		graph[a][b].push_back(words[i]);
		adj[a][b]++;
		outdegree[a]++;
		indegree[b]++;
	}

	//Euler 가능한지 체킹
	if (!checkEuler())
	{
		cout << "IMPOSSIBLE" << '\n';
		return 0;
	}

	//오일러 서킷이여도 모든 간선 실패할 수가 있나?
	solve();

	if (circuit.size() != words.size() + 1)
	{
		cout << "IMPOSSIBLE" << '\n';
		return 0;
	}

	reverse(circuit.begin(), circuit.end());

	string ret = "";
	for (int i = 1; i < circuit.size(); i++)
	{
		int a = circuit[i - 1];
		int b = circuit[i];

		ret += graph[a][b].back();
		graph[a][b].pop_back();
		ret += " ";
	}

	cout << ret << '\n';
	return 0;
}