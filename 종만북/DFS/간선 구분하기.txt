#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

//간선 종류 구분하기(무향은 교차 간선 없음)
//0 1
//0 3
//1 2
//2 1
//3 1
//3 2

//인접 리스트
vector<vector<int>> adj(4);
vector<int> discovered, finished;
int count_;

void dfs(int here)
{
	discovered[here] = count_++;

	for (int i = 0; i < adj[here].size(); i++)
	{
		int there = adj[here][i];
		printf("%d -> %d: ", here, there);

		if (discovered[there] == -1)
		{
			printf("tree edge\n");
			dfs(there);
		}

		else if (discovered[there] > discovered[here])
			printf("forward edge\n");

		else if (discovered[there] < discovered[here])
		{
			if (finished[there] == 1)
				printf("cross edge\n");
			else
				printf("backward edge\n");
		}
	}

	finished[here] = 1;
}

int main()
{
	//입력 초기화
	adj[0].push_back(1);
	adj[0].push_back(2);
	adj[0].push_back(3);
	adj[1].push_back(2);
	adj[2].push_back(1);
	adj[3].push_back(1);
	adj[3].push_back(2);

	//이 과정 ?? 누적하면 안될듯(주관적 생각)
	for (int i = 0; i < adj.size(); i++)
	{
		discovered.clear();
		finished.clear();
		discovered.resize(4, -1);
		finished.resize(4, 0);
		count_ = 0;
		dfs(i);
		cout << '\n';
	}


	return 0;
}