#include "pch.h"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <stack>
#include <queue>
using namespace std;

int N, M;
int INF = 987654321;

vector<vector<pair<int, int>>> adj;

//7 9
//0 1 5
//0 2 1
//1 5 3
//1 3 1
//1 6 3
//2 3 4
//3 4 5
//3 5 3
//5 6 2

int main()
{
	scanf_s("%d %d", &N, &M);
	adj.resize(N, vector<pair<int, int>>());
	for (int i = 0; i < M; i++)
	{
		int a, b, c;
		scanf_s("%d %d %d", &a, &b, &c);
		adj[a].push_back(make_pair(c, b));
		adj[b].push_back(make_pair(c, a));
	}

	//prim
	int answer = 0;
	vector<pair<int, int>> path;
	vector<bool> added(N, false);

	vector<int> minW(N, INF);
	vector<int> parent(N, -1);

	minW[0] = parent[0] = 0;

	for (int iter = 0; iter < N; iter++)
	{
		int u = -1;
		for (int i = 0; i < N; i++)
		{
			if (!added[i] && (u == -1 || minW[u] > minW[i]))
				u = i;
		}

		if (parent[u] != u)
			path.push_back(make_pair(parent[u],u));

		answer += minW[u];
		added[u] = true;

		for (int i = 0; i < adj[u].size(); i++)
		{
			int there = adj[u][i].second;
			int cost = adj[u][i].first;
			if (!added[there] && minW[there] > cost)
			{
				minW[there] = cost;
				parent[there] = u;
			}
		}
	}

	printf("%d\n", answer);

	return 0;
}