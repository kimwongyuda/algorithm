#include "pch.h"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

int cache[100][100];
int n;
string pattern;
string str;
vector<string> answer;

bool solve(int w, int s) {
	//w[pos]와 s[pos]를 맞춰나간다.
	int &ret = cache[w][s];
	if (ret != -1) return ret;

	if (w < pattern.size() && s < str.size() && (pattern[w] == '?' || pattern[w] == str[s]))
		return ret = solve(w + 1, s + 1);

	//더이상 대응할 수 없으면 왜 while문이 끝났는지 확인한다.
	//2.패턴 끝에 도달해서 끝난경우: 문자열도 끝났어야 함
	if (w == pattern.size()) return ret = (s == str.size());

	//n^3 방법, 더 직관 적임
	if (pattern[w] == '*')
	{
		for (int skip = 0; s + skip <= str.size(); skip++)
		{
			if (solve(w + 1, s + skip))
				return ret = 1;
		}
	}

	//0글자 대응되는 경우,한글자 대응되는 경우 등을 모두 재귀호출을 통해 확인 가능
	//한글자씩 버려가며 진행하는데.. 직관적인 느낌이 없지만 n^2로 처리 가능
	//if (pattern[w] == '*')
	//	if (solve(w + 1, s) || (s < str.size() && solve(w, s + 1)))
	//		return ret = 1;
	//3.이 외의 경우에는 모두 대응되지 않는다.
	return ret = 0;

}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	//초기화

	cin >> pattern;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		memset(cache, -1, sizeof(cache));
		cin >> str;
		bool flag = solve(0, 0);
		if (flag)
		{
			answer.push_back(str);
		}
	}

	sort(answer.begin(), answer.end());

	for (int i = 0; i < answer.size(); i++)
		cout << answer[i] << "\n";

	return 0;
}