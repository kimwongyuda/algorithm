#include "pch.h"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <stack>
#include <numeric>
#include <queue>
#include <cassert>
using namespace std;

int dx[4] = { 0, 1, 0, -1 };
int dy[4] = { 1, 0, -1, 0 };

int N, M;
char board[21][21];
int INF = 987654321;

//이분 매칭 작업
int n, m;
int adj[64][64];
vector<int> amatch, bmatch;
vector<bool> visited;

//최대 독립 집합 구하기
vector<bool> achosen, bchosen;

bool dfs(int a)
{
	if (visited[a])
		return false;

	visited[a] = true;

	for (int b = 0; b < m; b++)
	{
		if (adj[a][b])
		{
			if (bmatch[b] == -1 || dfs(bmatch[b]))
			{
				amatch[a] = b;
				bmatch[b] = a;
				return true;
			}
		}
	}

	return false;
}

int bipartiteMatch()
{
	amatch = vector<int>(n, -1);
	bmatch = vector<int>(m, -1);
	int match_count = 0;
	for (int start = 0; start < n; start++)
	{
		visited = vector<bool>(n, false);
		if (dfs(start))
			match_count++;
	}
	return match_count;
}

void grid()
{
	vector<vector<int>> id(N, vector<int>(M, -1));
	n = m = 0;

	for (int x = 0; x < N; x++)
	{
		for (int y = 0; y < M; y++)
		{
			if (board[x][y] != '#')
			{
				//짝수 좌표
				if ((x + y) % 2 == 0)
					id[x][y] = n++;
				else
					id[x][y] = m++;
			}
		}
	}

	//이제 adj 만들기, 인접한 칸 연결
	for (int x1 = 0; x1 < N; x1++)
	{
		for (int y1 = 0; y1 < M; y1++)
		{
			if ((x1 + y1) % 2 == 0 && board[x1][y1] != '#')
			{
				for (int k = 0; k < 4; k++)
				{
					int x2 = x1 + dx[k];
					int y2 = y1 + dy[k];

					if (0 <= x2 && x2 <= N - 1 && 0 <= y2 && y2 <= M - 1 && board[x2][y2] != '#')
						adj[id[x1][y1]][id[x2][y2]] = 1;
				}
			}
		}
	}

}

void calcMaxIndependentSet()
{
	grid();
	int C = bipartiteMatch();

	achosen = vector<bool>(n, true);
	bchosen = vector<bool>(m, false);
	for (int i = 0; i < m; i++)
	{
		if (bmatch[i] == -1)
			bchosen[i] = true;
	}

	while (true)
	{
		bool changed = false;
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				if (achosen[i] && bchosen[j] && adj[i][j])
				{
					assert(amatch[i] != -1);
					achosen[i] = false;
					bchosen[amatch[i]] = true;
					changed = true;
				}
			}
		}

		if (!changed)
			break;
	}
}

int main()
{
	//입력
	cin >> N >> M;
	for (int i = 0; i < N; i++)
	{
		string temp;
		cin >> temp;
		for (int j = 0; j < M; j++)
			board[i][j] = temp[j];
	}

	calcMaxIndependentSet();

	int answer = 0;
	for (int i = 0; i < m; i++)
	{
		if (bchosen[i] == true)
			answer++;
	}

	printf("%d\n", answer);
	return 0;
}