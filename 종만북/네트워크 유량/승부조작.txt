#include "pch.h"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <stack>
#include <queue>
using namespace std;

int N, M;
int wins[12];
int match[200][2];
int INF = 987654321;
int wc = 0;

int capacity[214][214], flow[214][214];

int networkFlow(int src, int sink)
{
	int totalflow = 0;
	int V = 2 + M + N;
	while (true)
	{
		vector<int> parent(V, -1);
		queue<int> q;
		parent[src] = 0;
		q.push(src);

		//증가경로 새로 찾고
		while (!q.empty() && parent[sink] == -1)
		{
			int here = q.front();
			q.pop();

			//인접 인것들
			for (int there = 0; there < V; there++)
			{
				//만약 보낼수 있고(유량 꽉 안찾고), 부모 없다면
				if (capacity[here][there] - flow[here][there] > 0 && parent[there] == -1)
				{
					parent[there] = here;
					q.push(there);
				}
			}
		}

		//증가경로 더이상 없음
		if (parent[sink] == -1)
			break;

		int amount = INF;

		//유량 업데이트
		for (int p = sink; p != src; p = parent[p])
		{
			amount = min(amount, capacity[parent[p]][p] - flow[parent[p]][p]);
		}
		for (int p = sink; p != src; p = parent[p])
		{
			flow[parent[p]][p] += amount;
			flow[p][parent[p]] -= amount;
		}
		totalflow += amount;
	}

	return totalflow;
}

bool canWinWith(int totalWins)
{
	if (*max_element(wins + 1, wins + N) >= totalWins)
		return false;

	int V = 2 + M + N;

	//각 경기는 1점씩 얻고
	//그 경기는 일회성이니 무한대 아닌 각 선수에 1점씩 용량을 가짐
	for (int i = 0; i < M; i++)
	{
		capacity[0][2 + i] = 1;

		capacity[2 + i][2 + M + match[i][0]] = 1;
		capacity[2 + i][2 + M + match[i][1]] = 1;
	}

	//각 선수가 이길 수 있는 횟수를 우리 목적에 맞게 => 그 횟수 안에서 유량 커버되면 성공!
	for (int i = 0; i < N; i++)
	{
		int maxwin = (i == 0 ? totalWins : totalWins - 1);
		capacity[2 + M + i][1] = maxwin - wins[i];
	}

	return networkFlow(0,1) == M;
}

int main()
{
	scanf_s("%d %d", &N, &M);
	for (int i = 0; i < N; i++)
	{
		int win;
		scanf_s("%d", &win);
		wins[i] = win;
	}
	for (int i = 0; i < M; i++)
	{
		int a, b;
		scanf_s("%d %d", &a, &b);
		match[i][0] = a;
		match[i][1] = b;
		if (a == 0 || b == 0)
			wc++;
	}

	for (int i = 0; i <= wc; i++)
	{
		if (canWinWith(wins[0] + i))
		{
			printf("%d\n", wins[0] + i);
			break;
		}
	}

	return 0;
}