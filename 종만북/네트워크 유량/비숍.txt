#include "pch.h"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <stack>
#include <numeric>
#include <queue>
using namespace std;

int dx[2] = { 1,1 };
int dy[2] = { -1,1 };

int N;
char board[9][9];
int INF = 987654321;

int id[2][8][8];

//이분 매칭 작업
int n, m;
int adj[64][64];
vector<int> amatch, bmatch;
vector<bool> visited;

bool dfs(int a)
{
	if (visited[a])
		return false;

	visited[a] = true;

	for (int b = 0; b < m; b++)
	{
		if (adj[a][b])
		{
			if (bmatch[b] == -1 || dfs(bmatch[b]))
			{
				amatch[a] = b;
				bmatch[b] = a;
				return true;
			}
		}
	}

	return false;
}

int bipartiteMatch()
{
	amatch = vector<int>(n, -1);
	bmatch = vector<int>(m, -1);
	int match_count = 0;
	for (int start = 0; start < n; start++)
	{
		visited = vector<bool>(n, false);
		if (dfs(start))
			match_count++;
	}
	return match_count;
}

int placebishop()
{
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			id[0][i][j] = -1;
			id[1][i][j] = -1;
		}
	}

	int count_[2] = { 0,0 };
	for (int k = 0; k < 2; k++)
	{
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < N; j++)
			{
				if (board[i][j] == '.' && id[k][i][j] == -1)
				{
					int cx = i;
					int cy = j;
					while (0 <= cx && cx <= N - 1 && 0 <= cy && cy <= N - 1 && board[cx][cy] == '.')
					{
						id[k][cx][cy] = count_[k];
						cx = cx + dx[k];
						cy = cy + dy[k];
					}
					count_[k]++;
				}
			}
		}
	}

	//이분 그래프 위한 작업
	n = count_[0];
	m = count_[1];
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (board[i][j] == '.')
				adj[id[0][i][j]][id[1][i][j]] = 1;
		}
	}

	return bipartiteMatch();

}

int main()
{
	//입력
	cin >> N;
	for (int i = 0; i < N; i++)
	{
		string temp;
		cin >> temp;
		for (int j = 0; j < N; j++)
			board[i][j] = temp[j];
	}

	printf("%d\n", placebishop());
	return 0;
}