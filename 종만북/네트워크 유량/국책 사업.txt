#include "pch.h"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <stack>
#include <numeric>
#include <queue>
using namespace std;

int N, M;
int INF = 987654321;

int profits[100];
int spends[100];
int usemat[100][100];

int capacity[204][204], flow[204][204];

int networkFlow(int src, int sink)
{
	int totalflow = 0;
	int V = 2 + M + N;
	while (true)
	{
		vector<int> parent(V, -1);
		queue<int> q;
		parent[src] = 0;
		q.push(src);

		//증가경로 새로 찾고
		while (!q.empty() && parent[sink] == -1)
		{
			int here = q.front();
			q.pop();

			//인접 인것들
			for (int there = 0; there < V; there++)
			{
				//만약 보낼수 있고(유량 꽉 안찾고), 부모 없다면
				if (capacity[here][there] - flow[here][there] > 0 && parent[there] == -1)
				{
					parent[there] = here;
					q.push(there);
				}
			}
		}

		//증가경로 더이상 없음
		if (parent[sink] == -1)
			break;

		int amount = INF;

		//유량 업데이트
		for (int p = sink; p != src; p = parent[p])
		{
			amount = min(amount, capacity[parent[p]][p] - flow[parent[p]][p]);
		}
		for (int p = sink; p != src; p = parent[p])
		{
			flow[parent[p]][p] += amount;
			flow[p][parent[p]] -= amount;
		}
		totalflow += amount;
	}

	return totalflow;
}

//최소 컷 문제
//어차피 C (컷 용량) + X (순 수익) 은 항상 값 똑같으니 최소의 C를 찾는 것이 중요 = 네트워크 구성만 해주고 포드-풀커슨 돌리면 된다.
//5 5
//260 60 140 350 500
//250 100 150 300 100
//1 0 0 0 0
//1 1 1 0 0
//0 0 1 1 0
//0 0 0 1 0
//0 0 0 1 1

int maxprofit()
{
	int src = 0;
	int sink = 1;

	int V = 2 + N + M;

	for (int i = 0; i < N; i++)
	{
		capacity[0][2 + i] = profits[i];
	}

	for (int i = 0; i < M; i++)
	{
		capacity[2 + N + i][1] = spends[i];
	}
	
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			if (usemat[i][j])
				capacity[2 + i][2 + N + j] = INF;
		}
	}

	int X = accumulate(profits, profits + N, 0);
	int C = networkFlow(src, sink);

	return X - C;
}

int main()
{
	scanf_s("%d %d", &N, &M);
	for (int i = 0; i < N; i++)
	{
		int a;
		scanf_s("%d", &a);
		profits[i] = a;
	}

	for (int i = 0; i < M; i++)
	{
		int a;
		scanf_s("%d", &a);
		spends[i] = a;
	}

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			int a;
			scanf_s("%d", &a);
			usemat[i][j] = a;
		}
	}

	printf("%d\n", maxprofit());
	return 0;
}