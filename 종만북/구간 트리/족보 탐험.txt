
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

vector<int> child[13];
int N=12;
int arr[12] = {0, 1, 1, 3, 3, 0, 6, 0, 8, 9, 9, 8};
vector<int> trip;
int depth[13];
int locintrip[13];

int seg[100];

void traverse(int here, int d)
{
	depth[here] = d;
	locintrip[here] = trip.size();
	trip.push_back(here);

	for (int i = 0; i < child[here].size();i++)
	{
		traverse(child[here][i], d+1);
		trip.push_back(here);
	}
}

int init(int left, int right, int node)
{
	if (left == right)
		return seg[node] = trip[left];
	
	int mid = (left + right) / 2;
	
	int leftmin = init(left, mid, node * 2);
	int rightmin = init(mid + 1, right, node * 2 + 1);

	return seg[node] = min(leftmin, rightmin);
}

int query(int left, int right, int node, int nodeleft, int noderight)
{
	if (left > noderight || right < nodeleft)
		return 1234566789;

	if (left <= nodeleft && noderight <= right)
		return seg[node];

	int mid = (nodeleft + noderight) / 2;
	int leftchild = query(left, right, node * 2, nodeleft, mid);
	int rightchild = query(left, right, node * 2 + 1, mid + 1, noderight);

	return min(leftchild, rightchild);
}

int main()
{
	//child
	for (int i = 0; i < N;i++)
		child[arr[i]].push_back(i + 1);

	traverse(0,0);
	init(0, 24, 1);

	int loc1 = locintrip[4];
	int loc2 = locintrip[11];

	int res = query(loc1, loc2, 1, 0, 25);

	int answer = depth[4] + depth[11] - 2 * depth[res];
	cout << answer << endl;

	return 0;
}
