#include <queue>
#include <iostream>

using namespace std;
int V;
int E;
int N;
int M;

//가중치, 정점
vector<vector<pair<int, int>>> adj;
vector<int> dist;
vector<int> fires;
vector<int> fighters;

int main() 
{
    scanf_s("%d %d %d %d", &V, &E, &N, &M);

    //단 0번은 가상의 정점
    adj.resize(V+1, vector<pair<int, int>>());
    dist.resize(V + 1, 123456789);

    for (int i = 0; i < E; i++)
    {
        int a;
        int b;
        int c;
        scanf_s("%d %d %d", &a, &b, &c);
        adj[a].push_back(make_pair(c, b));
        adj[b].push_back(make_pair(c, a));
    }

    for (int i = 0; i < N; i++)
    {
        int temp;
        scanf_s("%d", &temp);
        fires.push_back(temp);
    }

    for (int i = 0; i < M; i++)
    {
        int temp;
        scanf_s("%d", &temp);
        fighters.push_back(temp);

        adj[0].push_back(make_pair(0, temp));
        adj[temp].push_back(make_pair(0, 0));
    }

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push(make_pair(0, 0));
    dist[0] = 0;

    while (!pq.empty())
    {
        int cost = pq.top().first;
        int here = pq.top().second;

        pq.pop();

        if (dist[here] < cost)
            continue;

        for (int i = 0; i < adj[here].size(); i++)
        {
            int there = adj[here][i].second;
            int ncost = adj[here][i].first + cost;

            if (dist[there] > ncost)
            {
                pq.push(make_pair(ncost, there));
                dist[there] = ncost;
            }
        }
    }

    int answer = 0;
    for (int i = 0; i < fires.size(); i++)
        answer += dist[fires[i]];

    printf("%d\n", answer);


    return 0;
}