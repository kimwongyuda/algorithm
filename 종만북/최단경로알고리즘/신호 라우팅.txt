#include <iostream>
#include <algorithm>
#include <vector>
#include <list>
#include <string>
#include <map>
#include <queue>

using namespace std;

int N;
int M;

//가중치, 정점의 인접 리스트
vector<vector<pair<double, int>>> adj;
vector<double> dist;

int main()
{
	scanf_s("%d %d", &N, &M);
	adj.resize(N, vector<pair<double, int>>());
	dist.resize(N, 123456789.0);

	for (int i = 0; i < M; i++)
	{
		int a;
		int b;
		double c;
		scanf_s("%d %d %lf", &a, &b, &c);

		adj[a].push_back(make_pair(c, b));
	}

	priority_queue<pair<double, int>, vector<pair<double, int>>, greater<pair<double, int>>> pq;
	pq.push(make_pair(1.0, 0));
	dist[0] = 1.0;

	//다익스트라
	while (!pq.empty())
	{
		pair<double, int> temp = pq.top();
		pq.pop();

		double cost = temp.first;
		int here = temp.second;
		
		//다른 큐 무시할려고(경로 2개 이상일 때)
		if (dist[here] < cost)
			continue;

		for (int i = 0; i < adj[here].size(); i++)
		{
			int there = adj[here][i].second;
			double nc = cost * adj[here][i].first;

			//애초에 큐에 안담을려고
			if (dist[there] > nc)
			{
				dist[there] = nc;
				pq.push(make_pair(nc, there));
			}
		}

	}

	printf("%lf\n", dist[N - 1]);

	return 0;
}