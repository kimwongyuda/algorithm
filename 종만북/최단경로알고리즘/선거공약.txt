#include <queue>
#include <iostream>
#include <string>
#include <algorithm>

using namespace std;

int V, M, N;
int adj[200][200];

int INF = 123456789;

struct newpath {
    int a;
    int b;
    int c;
};

vector<newpath> news;

bool update(int a, int b, int c)
{
    if (adj[a][b] <= c)
        return false;

    for (int i = 0; i < V; i++)
    {
        for (int j = 0; j < V; j++)
        {
            adj[i][j] = min(adj[i][j], min(adj[i][a] + c + adj[b][j], adj[i][b] +c + adj[a][j]));
        }
    }

    return true;
}

int main() 
{
    scanf_s("%d %d %d", &V, &M, &N);

    //초기화
    for (int i = 0; i < V; i++)
    {
        for (int j = 0; j < V; j++)
        {
            if (i == j)
                adj[i][j] = 0;
            else
                adj[i][j] = INF;
        }
    }

    for (int i = 0; i < M; i++)
    {
        int a, b, c;
        scanf_s("%d %d %d", &a, &b, &c);
        adj[a][b] = c;
        adj[b][a] = c;
    }

    for (int i = 0; i < N; i++)
    {
        int a_, b_, c_;
        scanf_s("%d %d %d", &a_, &b_, &c_);
        newpath temp;
        temp.a = a_;
        temp.b = b_;
        temp.c = c_;
        news.push_back(temp);
    }

    //정점 거칠때
    for (int k = 0; k < V; k++)
    {
        for (int i = 0; i < V; i++)
        {
            //시간 단축
            if (adj[i][k] == INF)
                continue;

            for (int j = 0; j < V; j++)
            {
                if (adj[i][j] > adj[i][k] + adj[k][j])
                {
                    adj[i][j] = adj[i][k] + adj[k][j];
                }
            }
        }
    }

    int answer = 0;
    for (int i = 0; i < news.size(); i++)
    {
        if (!update(news[i].a, news[i].b, news[i].c))
            answer += 1;
    }

    printf("%d\n", answer);
    return 0;
}