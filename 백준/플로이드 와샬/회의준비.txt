#include "pch.h"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <stack>
#include <queue>
using namespace std;

int N, M;
int INF = 987654321;

int adj[101][101];

bool visited[101];
int max_[101];
int teamcount = 0;

int main()
{
	scanf_s("%d %d", &N, &M);

	for (int i = 1; i <= N; i++)
	{
		for (int j = 1; j <= N; j++)
		{
			if (i == j)
				adj[i][j] = 0;
			else
				adj[i][j] = INF;
		}
	}

	for (int i = 0; i < M; i++)
	{
		int a, b;
		scanf_s("%d %d", &a, &b);
		adj[a][b] = 1;
		adj[b][a] = 1;
	}

	for (int k = 1; k <= N; k++)
	{
		for (int i = 1; i <= N; i++)
		{
			for (int j = 1; j <= N; j++)
			{
				adj[i][j] = min(adj[i][j], adj[i][k] + adj[k][j]);
			}
		}
	}

	//대표 찾기
	for (int i = 1; i <= N; i++)
	{
		for (int j = 1; j <= N; j++)
		{
			if (adj[i][j] < INF && adj[i][j] > max_[i])
				max_[i] = adj[i][j];
		}
	}
	vector<int> answer;

	for (int i = 1; i <= N; i++)
	{
		if (!visited[i])
		{
			int idx = i;
			for (int j = 1; j <= N; j++)
			{
				for (int j = 1; j <= N; j++)
				{
					if (adj[i][j] < INF)
					{
						visited[j] = true;
						if (max_[idx] > max_[j])
							idx = j;
					}
				}
			}
			answer.push_back(idx);
		}
	}
	sort(answer.begin(), answer.end());
	printf("%d\n", answer.size());
	for (int i = 0; i < answer.size(); i++)
	{
		printf("%d\n", answer[i]);
	}

	return 0;
}