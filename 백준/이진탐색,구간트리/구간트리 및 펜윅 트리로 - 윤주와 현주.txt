#include <cstdio>
#include <algorithm>
#include <iostream>
#include <string>

using namespace std;
int n, seg[400040];
long long r;
string s[100010];
pair<string, int> rs[100010];

int update(int pos, int val, int node, int x, int y) {

    if (y < pos || pos < x)return seg[node];
    if (x == y)return seg[node] = val;
    int mid = (x + y) >> 1;

    return seg[node] = update(pos, val, node * 2, x, mid) + update(pos, val, node * 2 + 1, mid + 1, y);

}

int query(int lo, int hi, int node, int x, int y) {

    if (y < lo || hi < x)return 0;
    if (lo <= x && y <= hi)return seg[node];
    int mid = (x + y) >> 1;

    return query(lo, hi, node * 2, x, mid) + query(lo, hi, node * 2 + 1, mid + 1, y);

}

int main() {
    ios_base::sync_with_stdio(false);

    cin >> n;
    for (int i = 0; i < n; i++)
        cin >> s[i];

    sort(s, s + n);

    for (int i = 0; i < n; i++) {
        reverse(s[i].begin(), s[i].end());
        rs[i] = { s[i],i };
    }

    sort(rs, rs + n);

    for (int i = 0; i < n; i++) {
        r += (long long)query(rs[i].second + 1, n - 1, 1, 0, n - 1);
        update(rs[i].second, 1, 1, 0, n - 1);
    }

    cout << r;

    return 0;
}

