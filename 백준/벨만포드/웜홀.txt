#include "pch.h"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <stack>
#include <queue>
using namespace std;

int T;
int N[5], M[5], W[5];
int INF = 987654321;

vector<vector<pair<int, int>>> adj[5];

int main()
{
	scanf_s("%d", &T);

	for (int i = 0; i < T; i++)
	{
		scanf_s("%d %d %d", &N[i], &M[i], &W[i]);
		adj[i].resize(N[i] + 1, vector<pair<int, int>>());

		for (int j = 0; j < M[i]; j++)
		{
			int a, b, c;
			scanf_s("%d %d %d", &a, &b, &c);
			adj[i][a].push_back(make_pair(c, b));
			adj[i][b].push_back(make_pair(c, a));
		}

		for (int j = 0; j < W[i]; j++)
		{
			int a, b, c;
			scanf_s("%d %d %d", &a, &b, &c);
			adj[i][a].push_back(make_pair(-c, b));
		}
	}

	for (int i = 0; i < T; i++)
	{
		//V-1ë²ˆ
		vector<int> upper;
		upper.resize(N[i] + 1, INF);
		upper[1] = 0;
		for (int j = 0; j < N[i] - 1; j++)
		{
			for (int here = 1; here <= N[i]; here++)
			{
				for (int k = 0; k < adj[i][here].size(); k++)
				{
					int there = adj[i][here][k].second;
					int cost = adj[i][here][k].first;

					if (upper[there] > upper[here] + cost)
						upper[there] = upper[here] + cost;
				}
			}
		}

		bool flag = false;
		for (int here = 1; here <= N[i]; here++)
		{
			for (int k = 0; k < adj[i][here].size(); k++)
			{
				int there = adj[i][here][k].second;
				int cost = adj[i][here][k].first;

				if (upper[there] > upper[here] + cost)
				{
					printf("YES\n");
					flag = true;
					break;
				}
			}
			if (flag)
				break;
		}
		if (!flag)
			printf("NO\n");
	}

	return 0;
}