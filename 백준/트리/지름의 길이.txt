#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int N;

int input_1[10000];
int input_2[10000];
int input_3[10000];

struct Node {
	int num;
	int dis;

	Node() {
		num = 0;
		dis = 0;
	}

	Node(int num_, int dis_)
	{
		num = num_;
		dis = dis_;
	}

	vector<Node*> childs;
};

Node* root;

Node* gettree(Node* root_)
{
	for (int i = 0; i < N - 1; i++)
	{
		if (input_1[i] == root_->num)
		{
			Node* temp = new Node(input_2[i], input_3[i]);
			temp = gettree(temp);
			root_->childs.push_back(temp);
		}
	}

	return root_;
}

bool cmp(pair<int, int> a, pair<int, int> b)
{
	return a.second < b.second;
}

pair<int,int> solve(Node* root_)
{

	if (root_->num != 1)
	{
		vector<pair<int,int>> results;

		for (int i = 0; i < root_->childs.size(); i++)
		{
			pair<int, int> temp = solve(root_->childs[i]);
			results.push_back(temp);
		}

		if (results.size() == 0)
			return make_pair(root_->dis, root_->dis);

		if (results.size() == 1)
			return make_pair(results[0].first, results[0].second + root_->dis);

		//
		sort(results.begin(), results.end());
		int a = results[results.size() - 1].first;

		sort(results.begin(), results.end(), cmp);
		int b = results[results.size() - 1].second;
		int c = results[results.size() - 2].second;

		a = max(a, b + c);

		return make_pair(a, b + root_->dis);
				
	}

	else
	{
		vector<pair<int, int>> results;

		for (int i = 0; i < root_->childs.size(); i++)
		{
			pair<int, int> temp = solve(root_->childs[i]);
			results.push_back(temp);
		}

		if (results.size() == 0)
			return make_pair(root_->dis, root_->dis);

		if (results.size() == 1)
			return make_pair(results[0].first, results[0].second + root_->dis);

		//
		sort(results.begin(), results.end());
		int a = results[results.size() - 1].first;

		sort(results.begin(), results.end(), cmp);
		int b = results[results.size() - 1].second;
		int c = results[results.size() - 2].second;

		return make_pair(a, b + c);
	}

}

int main()
{
	scanf_s("%d", &N);

	for (int i = 0; i < N - 1; i++)
	{
		scanf_s("%d", &input_1[i]);
		scanf_s("%d", &input_2[i]);
		scanf_s("%d", &input_3[i]);
	}

	root = new Node(1, 0);

	root = gettree(root);

	pair<int, int> res = solve(root);
	int answer = max(res.first, res.second);
	printf("%d\n", answer);

	return 0;
}