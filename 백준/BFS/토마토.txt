#include <iostream>
#include <algorithm>
#include <vector>
#include <list>
#include <string>
#include <map>
#include <queue>>

using namespace std;

int N;
int M;

int arr[1000][1000];

int dx[4] = { 0, 1, 0, -1 };
int dy[4] = { 1, 0, -1, 0 };

int discovered[1000][1000];

int cmparr()
{
	int max_ = 0;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			max_ = max(max_, discovered[i][j]);
			if (arr[i][j] == 0)
				return 0;
		}
	}

	return max_;
}

int main()
{
	scanf_s("%d %d", &M, &N);

	queue<pair<int, int>> q;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			scanf_s("%d", &arr[i][j]);
			if (arr[i][j] == 1)
			{
				q.push(make_pair(i, j));
				discovered[i][j] = 1;
			}
		}
	}

	//bfs 시작
	int answer = 0;

	while (!q.empty())
	{
		pair<int, int> here = q.front();
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int nx = here.first + dx[i];
			int ny = here.second + dy[i];

			if (nx <0 || nx > N - 1 || ny <0 || ny> M - 1)
				continue;

			if (discovered[nx][ny] == 0 && arr[nx][ny] == 0)
			{
				q.push(make_pair(nx, ny));
				arr[nx][ny] = 1;
				discovered[nx][ny] = discovered[here.first][here.second] + 1;
			}
		}
	}

	answer = cmparr();

	printf("%d\n", answer - 1);


	return 0;
}