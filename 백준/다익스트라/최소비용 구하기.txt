#include "pch.h"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <stack>
#include <queue>
using namespace std;

int N, M;
int INF = 987654321;

vector<vector<pair<int, int>>> adj;
vector<int> dist;

int main()
{
	scanf_s("%d %d", &N, &M);
	adj.resize(N + 1, vector<pair<int, int>>());
	dist.resize(N + 1, INF);

	for (int i = 0; i < M; i++)
	{
		int a, b, c;
		scanf_s("%d %d %d", &a, &b, &c);
		adj[a].push_back(make_pair(c,b));
	}
	int src = 0, dst = 0;
	scanf_s("%d %d", &src, &dst);

	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
	pq.push(make_pair(0,src));
	dist[1] = 0;

	while (!pq.empty())
	{
		int here = pq.top().second;
		int cost = pq.top().first;
		pq.pop();

		if (dist[here] < cost)
			continue;

		for (int i = 0; i < adj[here].size(); i++)
		{
			int there = adj[here][i].second;
			int ncost = adj[here][i].first + cost;

			if (ncost < dist[there])
			{
				dist[there] = ncost;
				pq.push(make_pair(ncost, there));
			}
		}
	}

	printf("%d\n", dist[dst]);

	return 0;
}