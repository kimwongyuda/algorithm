#include <queue>
#include <iostream>
#include <algorithm>
#include <string>

using namespace std;

int N;
int M;

int dx[4] = { 0,1,0,-1 };
int dy[4] = { 1,0,-1,0 };

char arr[101][101];
bool visited[100][100];

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    //입력
    cin >> M >> N;

    for (int i = 0; i < N; i++)
    {
        string temp;
        cin >> temp;
        for (int j = 0; j < M; j++)
        {
            arr[i][j] = temp[j];
        }
    }

    priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;

    pq.push(make_pair(0, make_pair(0, 0)));
    visited[0][0] = true;

    int answer = 0;

    while (!pq.empty())
    {
        int x = pq.top().second.first;
        int y = pq.top().second.second;
        int wallcost = pq.top().first;
        pq.pop();

        if (x == N - 1 && y == M - 1)
        {
            answer = wallcost;
            break;
        }

        for (int i = 0; i < 4; i++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (nx < 0 || nx > N - 1 || ny < 0 || ny > M - 1)
                continue;

            if (!visited[nx][ny])
            {
                if (arr[nx][ny] == '1')
                {
                    pq.push(make_pair(wallcost + 1, make_pair(nx, ny)));
                    visited[nx][ny] = true;
                }
                else
                {
                    pq.push(make_pair(wallcost, make_pair(nx, ny)));
                    visited[nx][ny] = true;
                }
            }
        }
    }

    printf("%d\n", answer);
    return 0;
}