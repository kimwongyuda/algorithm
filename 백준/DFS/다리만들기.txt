#include <iostream>
#include <algorithm>
#include <vector>
#include <list>
#include <string>
#include <map>
#include <queue>>

using namespace std;

int N;
int arr[100][100];
bool visited[100][100];

int dx[4] = { 0, 1, 0, -1 }; // 동남서북
int dy[4] = { 1, 0, -1, 0 };

int color = 1;

int distances[100][100];

void dfs(int x, int y)
{
	visited[x][y] = true;

	if(arr[x][y] != 0)
		arr[x][y] = color;

	for (int i = 0; i < 4; i++)
	{
		int nx = x + dx[i];
		int ny = y + dy[i];

		if (nx <0 || nx >N - 1 || ny <0 || ny >N - 1)
			continue;

		if (!visited[nx][ny])
		{
			if (arr[nx][ny] == 0 && arr[x][y] ==0 || arr[nx][ny] > 0 && arr[x][y] >0)
				dfs(nx, ny);
		}
	}

}

void disclear()
{
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
			distances[i][j] = -1;
	}
}

int main()
{
	scanf_s("%d", &N);

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
			scanf_s("%d", &arr[i][j]);
	}

	//dfs
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (!visited[i][j])
			{
				dfs(i, j);
				if (arr[i][j] != 0)
					color++;
			}
		}
	}

	//각 점마다 bfs 실행

	int answer = 1000;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (arr[i][j] == 0)
				continue;

			disclear();

			distances[i][j] = 0;

			queue<pair<int,int>> q;
			q.push(make_pair(i, j));

			while (!q.empty())
			{
				pair<int, int> here = q.front();
				q.pop();

				if (distances[here.first][here.second] >= answer)
					break;

				if (arr[here.first][here.second] != 0 && arr[here.first][here.second] != arr[i][j])
				{
					answer = distances[here.first][here.second];
					break;
				}

				for (int k = 0; k < 4; k++)
				{
					int nx = here.first + dx[k];
					int ny = here.second + dy[k];

					if (nx <0 || nx >N - 1 || ny <0 || ny > N - 1)
						continue;

					if (distances[nx][ny] == -1)
					{
						if (arr[nx][ny] != arr[i][j])
						{
							q.push(make_pair(nx, ny));
							distances[nx][ny] = distances[here.first][here.second] + 1;
						}
					}
				}
			}

		}
	}

	printf("%d\n", answer - 1);

	return 0;
}