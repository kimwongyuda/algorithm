#include <iostream>
#include <algorithm>
#include <vector>
#include <list>
#include <string>
#include <map>
#include <queue>>

using namespace std;


int N;
int M;

int arr[300][300];
int darr[300][300];
int count_ = 0;
bool visited[300][300];

int dx[4] = { 0,1,0,-1 };
int dy[4] = { 1,0,-1,0 };

void dfs(int x, int y)
{
	visited[x][y] = true;

	for (int i = 0; i < 4; i++)
	{
		int nx = x + dx[i];
		int ny = y + dy[i];

		if (!visited[nx][ny])
		{
			if (nx < 0 || nx > N - 1 || ny <0 || ny > M - 1)
				continue;

			if (arr[x][y] == 0)
			{
				if (arr[nx][ny] == 0)
					dfs(nx, ny);
			}
			else
			{
				if (arr[nx][ny] > 0)
					dfs(nx, ny);
			}
		}
	}
}

int main()
{
	//ios_base::sync_with_stdio(false);
	//cin.tie(NULL);
	//cout.tie(NULL);

	scanf_s("%d", &N);
	scanf_s("%d", &M);
	
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			scanf_s("%d", &arr[i][j]);
		}
	}

	int answer = 0;

	//dfs를 회차별로 한다. count_가 2 미만 이여야만 돌린다.
	while (true)
	{
		//모두 다 0인지 확인
		bool flag = false;
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < M; j++)
			{
				if (arr[i][j] > 0)
					flag = true;
			}
		}

		if (!flag)
		{
			answer = 0;
			break;
		}

		count_ = 0;
		for (int i = 0; i < N;i++)
		{
			for (int j = 0; j < M;j++)
			{
				visited[i][j] = false;
			}
		}

		//dfs 순회
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < M; j++)
			{
				if (!visited[i][j])
				{
					dfs(i, j);

					if (arr[i][j] != 0)
						count_++;
				}
			}
		}

		if (count_ >= 2)
			break;

		//빙하 깎기
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < M; j++)
			{
				if (arr[i][j] == 0)
					continue;

				//동남서북
				for (int k = 0; k < 4; k++)
				{
					int nx = i + dx[k];
					int ny = j + dy[k];

					if (nx < 0 || nx > N - 1 || ny <0 || ny > M - 1)
						continue;

					if (arr[nx][ny] == 0)
						darr[i][j] += 1;
				}
			}
		}

		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < M; j++)
			{
				arr[i][j] -= darr[i][j];
				if (arr[i][j] < 0)
					arr[i][j] = 0;

				darr[i][j] = 0;
			}
		}

		answer++;
	}

	printf("%d\n", answer);

	return 0;
}