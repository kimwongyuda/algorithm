#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

void solve(int N, vector<int>& answer, vector<vector<int>> input)
{

	if (N == 1) {
		if (input[0][0] == -1)
			answer[0] += 1;
		else if (input[0][0] == 0)
			answer[1] += 1;
		else
			answer[2] += 1;

		return;
	}

	int flag = 0;
	int curnum = -2;
	for (int i = 0; i < input.size();i++) {
		for (int j = 0; j < input.size();j++) {
			if (curnum == -2)
			{
				curnum = input[i][j];
				continue;
			}

			if (curnum != input[i][j])
			{
				flag = 1;
				break;
			}
		}
		if (flag == 1)
			break;
	}
	
	if (flag == 0)
	{
		if (input[0][0] == -1)
			answer[0] += 1;
		else if (input[0][0] == 0)
			answer[1] += 1;
		else
			answer[2] += 1;

		return;
	}

	for (int i = 0; i<3;i++)
	{
		for(int j=0; j<3;j++)
		{
			
			vector<vector<int>> input_arr;

			for (int k = 0;k < N/3;k++)
			{
				vector<int> temp;
				int num = i * N / 3 + k;
				int num1 = N * j / 3;
				int num2 = N * (2 - j) / 3;
				std::copy(input[num].begin() + num1, input[num].end() - num2, std::back_inserter(temp));

				input_arr.push_back(temp);
			}

			solve(N / 3, answer, input_arr);

		}
	}
}

int main() 
{
	int N;
	cout << "->";
	cin >> N;

	vector<vector<int>> input = 
	{{0,0,0,1,1,1,-1,-1,-1},
	{0,0,0,1,1,1,-1,-1,-1},
	{0,0,0,1,1,1,-1,-1,-1},
	{1,1,1,0,0,0,0,0,0},
	{1,1,1,0,0,0,0,0,0},
	{1,1,1,0,0,0,0,0,0},
	{0,1,-1,0,1,-1,0,1,-1},
	{0,1,-1,0,1,-1,0,1,-1},
	{0,1,-1,0,1,-1,0,1,-1}};

	vector<int> answer = { 0,0,0 };

	solve(N, answer, input);

	for (int i = 0;i < answer.size();i++)
		cout << answer[i] << endl;

	return 0;
}